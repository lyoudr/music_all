### Structure
#                           slave db 1
# Nginx => Django Server => master db
#                           salve db 2
# The following database architecture is for streaming replication

version: '3'

services:
  pg-0: # master database
    container_name: pg-0
    image : bitnami/postgresql-repmgr:latest
    environment:
      # - POSTGRESQL_REPLICATION_MODE=master
      # - POSTGRESQL_REPLICATION_USER=replicator
      # - POSTGRESQL_REPLICATION_PASSWORD=replicator_passwd
      - REPMGR_PARTNER_NODES=pg-0,pg-1,pg-2
      - REPMGR_NODE_NAME=pg-0
      - REPMGR_NODE_NETWORK_NAME=pg-0
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PASSWORD=repmgrpass

      - POSTGRESQL_POSTGRES_PASSWORD=adminpassword
      - POSTGRESQL_USERNAME=ann
      - POSTGRESQL_PASSWORD=GxXynskDj134yi7P
      - POSTGRESQL_DATABASE=music
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname music -U ann"]
      timeout: 30s
      retries: 3
    ports:
      - 5433:5432

  pg-1: # slave database 1
    container_name: pg-1
    image: bitnami/postgresql-repmgr:latest
    environment:
      # - POSTGRESQL_REPLICATION_MODE=slave
      # - POSTGRESQL_REPLICATION_USER=replicator
      # - POSTGRESQL_REPLICATION_PASSWORD=replicator_passwd
      - REPMGR_PARTNER_NODES=pg-0,pg-1,pg-2
      - REPMGR_NODE_NAME=pg-1
      - REPMGR_NODE_NETWORK_NAME=pg-1
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PASSWORD=repmgrpass
      
      - POSTGRESQL_POSTGRES_PASSWORD=adminpassword
      # - POSTGRESQL_MASTER_HOST=pg-0
      # - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_USERNAME=ann
      - POSTGRESQL_PASSWORD=GxXynskDj134yi7P
      - POSTGRESQL_DATABASE=music
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname music -U ann"]
      timeout: 30s
      retries: 3
    depends_on:
      pg-0:
        condition: service_healthy
    ports:
      - 5434:5432
  
  pg-2: # slave database 2
    container_name: pg-2
    image: bitnami/postgresql-repmgr:latest
    environment:
      # - POSTGRESQL_REPLICATION_MODE=slave
      # - POSTGRESQL_REPLICATION_USER=replicator
      # - POSTGRESQL_REPLICATION_PASSWORD=replicator_passwd
      - REPMGR_PARTNER_NODES=pg-0,pg-1,pg-2
      - REPMGR_NODE_NAME=pg-2
      - REPMGR_NODE_NETWORK_NAME=pg-2
      - REPMGR_PRIMARY_HOST=pg-0
      - REPMGR_PASSWORD=repmgrpass
      
      - POSTGRESQL_POSTGRES_PASSWORD=adminpassword
      # - POSTGRESQL_MASTER_HOST=pg-0
      # - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_USERNAME=ann
      - POSTGRESQL_PASSWORD=GxXynskDj134yi7P
      - POSTGRESQL_DATABASE=music
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname music -U ann"]
      timeout: 30s
      retries: 3
    depends_on:
      pg-1:
        condition: service_healthy
    ports:
      - 5435:5432

  pg_pool: # database load balancer
    # Pgpool-II
    # 1. Connection Pooling:
    # Pgpool-II saves connections to the PostgreSQL servers, and reuse them whenever a new connection with the same properties (i.e. username, database, protocol version) comes in. 
    # It reduces connection overhead, and improves system's overall throughput.

    # 2. Replication
    # Pgpool-II can manage multiple PostgreSQL servers. Using the replication function enables creating a realtime backup on 2 or more physical disks, so 
    # that the service can continue without stopping servers in case of a disk failure.

    # 3. Load Balancing
    # If a database is replicated, executing a SELECT query on any server will return the same result. 
    # Pgpool-II takes an advantage of the replication feature to reduce the load on each PostgreSQL server by distributing SELECT queries among multiple servers, improving system's overall throughput.

    # 4. Limiting Exceeding Connections
    # There is a limit on the maximum number of concurrent connections with PostgreSQL, and connections are rejected after this many connections.
    # Setting the maximum number of connections, however, increases resource consumption and affect system performance.
    image: bitnami/pgpool:latest
    ports: 
      - 5436:5432
    environment:
      - PGPOOL_BACKEND_NODES=0:pg-0:5432,1:pg-1:5432,2:pg-2:5432
      - PGPOOL_SR_CHECK_USER=postgres
      - PGPOOL_SR_CHECK_PASSWORD=adminpassword
      - PGPOOL_ENABLE_LDAP=no
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpassword
      - PGPOOL_POSTGRES_USERNAME=postgres
      - PGPOOL_POSTGRES_PASSWORD=adminpassword
      - PGPOOL_USERNAME=ann
      - PGPOOL_PASSWORD=GxXynskDj134yi7P
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/scripts/pgpool/healthcheck.sh"]
      timeout: 30s
      retries: 3
    depends_on:
      pg-2:
        condition: service_healthy

  ann_server_1:
    build:
      context: music_server/
      dockerfile: Dockerfile.server
      args: 
        - ENV=dev
        - STATIC_ROOT=/music/static-root
        - MEDIA_ROOT=/tmp/media
        - DB_HOST=pg-0 # have to use "localhost" to refer to host when "ecs_network_mode" is "awsvpc" 
        - DB_NAME=music
        - DB_USER=ann
        - DB_PASSWORD=GxXynskDj134yi7P
        - GRPC_HOST=analysis_server:5100
        - AWS_ACCESS_KEY_ID=
        - AWS_SECRET_ACCESS_KEY=
        - AWS_STORAGE_BUCKET_NAME=lyoudrmusic
    restart: on-failure
    healthcheck :
      test : ["CMD-SHELL", "uwsgi_curl -X GET localhost:5000 /api/blog/class"]
      timeout : 60s
      retries : 10
    ports:
      - 5200:5000
    depends_on:
      pg_pool:
        condition: service_healthy
    volumes:
      - music:/music/static-root

  analysis_server:
    build:
      context: music_analysis/
      dockerfile: Dockerfile
      args:
        - DB_HOST=pg-0 # have to use "localhost" to refer to host when "ecs_network_mode" is "awsvpc" 
        - DB_NAME=music
        - DB_USER=ann
        - DB_PASSWORD=GxXynskDj134yi7P
    restart: on-failure
    ports:
      - 5300:5100
    # healthcheck:
    #   test: ["CMD-SHELL", "./grpcurl", "-import-path", "/analysis/protos/sales", "-proto", "sales.proto", "list"]
    #   timeout: 60s
    #   retries: 5
    depends_on:
      ann_server_1:
        condition: service_healthy

  nginx:
    build:
      context: music_server/
      dockerfile: Dockerfile.nginx
    healthcheck :
      test : ["CMD-SHELL", "curl -f http://localhost/health"]
      timeout : 60s
      retries : 10
    ports: 
      - 80:80
      - 443:443
    depends_on:
      ann_server_1:
        condition: service_healthy
    volumes:
      - music:/tmp/static-root
  
volumes:
  music: