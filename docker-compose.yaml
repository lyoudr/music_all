### 1. Structure
#                           slave db 1
# Nginx => Django Server => master db
#                           salve db 2
version: '3'

services:
  master_db:
    container_name: master_db
    image : docker.io/bitnami/postgresql:latest
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD=replicator_passwd
      - POSTGRESQL_USERNAME=ann
      - POSTGRESQL_PASSWORD=GxXynskDj134yi7P
      - POSTGRESQL_DATABASE=music
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname music -U ann"]
      timeout: 30s
      retries: 3
    ports:
      - 5433:5432

  slave_db_1: # slave database
    container_name: slave_db_1
    image: docker.io/bitnami/postgresql:latest
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD=replicator_passwd
      - POSTGRESQL_MASTER_HOST=master_db
      - POSTGRESQL_PASSWORD=GxXynskDj134yi7P
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname music -U ann"]
      timeout: 30s
      retries: 3
    depends_on:
      master_db:
        condition: service_healthy
    ports:
      - 5434:5432
  
  slave_db_2: 
    container_name: slave_db_2
    image: docker.io/bitnami/postgresql:latest
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=replicator
      - POSTGRESQL_REPLICATION_PASSWORD=replicator_passwd
      - POSTGRESQL_MASTER_HOST=master_db
      - POSTGRESQL_PASSWORD=GxXynskDj134yi7P
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes
    healthcheck:
      test: ["CMD-SHELL", "pg_isready --dbname music -U ann"]
      timeout: 30s
      retries: 3
    depends_on:
      master_db:
        condition: service_healthy
    ports:
      - 5435:5432

  ann_server_1:
    build:
      context: music_server/
      dockerfile: Dockerfile.server
      args: 
        - ENV=dev
        - STATIC_ROOT=/music/static-root
        - MEDIA_ROOT=/tmp/media
        - DB_HOST=master_db # have to use "localhost" to refer to host when "ecs_network_mode" is "awsvpc" 
        - DB_NAME=music
        - DB_USER=ann
        - DB_PASSWORD=GxXynskDj134yi7P
        - GRPC_HOST=analysis_server:5100
        - AWS_ACCESS_KEY_ID=
        - AWS_SECRET_ACCESS_KEY=
        - AWS_STORAGE_BUCKET_NAME=lyoudrmusic
    restart: on-failure
    healthcheck :
      test : ["CMD-SHELL", "uwsgi_curl -X GET localhost:5000 /api/blog/class"]
      timeout : 60s
      retries : 10
    ports:
      - 5200:5000
    depends_on:
      slave_db_1:
        condition: service_healthy
    volumes:
      - music:/music/static-root

  analysis_server:
    build:
      context: music_analysis/
      dockerfile: Dockerfile
      args:
        - DB_HOST=master_db # have to use "localhost" to refer to host when "ecs_network_mode" is "awsvpc" 
        - DB_NAME=music
        - DB_USER=ann
        - DB_PASSWORD=GxXynskDj134yi7P
    restart: on-failure
    ports:
      - 5300:5100
    # healthcheck:
    #   test: ["CMD-SHELL", "./grpcurl", "-import-path", "/analysis/protos/sales", "-proto", "sales.proto", "list"]
    #   timeout: 60s
    #   retries: 5
    depends_on:
      ann_server_1:
        condition: service_healthy

  nginx:
    build:
      context: music_server/
      dockerfile: Dockerfile.nginx
    healthcheck :
      test : ["CMD-SHELL", "curl -f http://localhost/health"]
      timeout : 60s
      retries : 10
    ports: 
      - 80:80
      - 443:443
    depends_on:
      ann_server_1:
        condition: service_healthy
    volumes:
      - music:/tmp/static-root
  
volumes:
  music: